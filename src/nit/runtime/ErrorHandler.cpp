//
// This source file is from part of poco library
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "nit_pch.h"

#include "nit/runtime/ErrorHandler.h"
#include "nit/legacy/Legacy_Poco.h"

NS_NIT_BEGIN;

////////////////////////////////////////////////////////////////////////////////

ErrorHandler* ErrorHandler::_pHandler = ErrorHandler::defaultHandler();
FastMutex ErrorHandler::_mutex;


ErrorHandler::ErrorHandler()
{
}


ErrorHandler::~ErrorHandler()
{
}

static void _DEFAULT_EX_MSG(const char* msg)
{
#if defined(NIT_WIN32)
	MessageBoxA( NULL, msg, "NIT: Unhandled Exception", MB_OK | MB_ICONERROR | MB_TASKMODAL );
#else
	LOG(0, "*** unhandled exception: %s\n", msg);
#endif
}

void ErrorHandler::exception(const Exception& exc)
{
	_DEFAULT_EX_MSG(exc.what());
}

	
void ErrorHandler::exception(const std::exception& exc)
{
	_DEFAULT_EX_MSG(exc.what());
}


void ErrorHandler::exception()
{
	_DEFAULT_EX_MSG("unknown exception");
}


void ErrorHandler::handle(const Exception& exc)
{
	FastMutex::ScopedLock lock(_mutex);
	try
	{
		_pHandler->exception(exc);
	}
	catch (...)
	{
	}
}

	
void ErrorHandler::handle(const std::exception& exc)
{
	FastMutex::ScopedLock lock(_mutex);
	try
	{
		_pHandler->exception(exc);
	}
	catch (...)
	{
	}
}


void ErrorHandler::handle()
{
	FastMutex::ScopedLock lock(_mutex);
	try
	{
		_pHandler->exception();
	}
	catch (...)
	{
	}
}


ErrorHandler* ErrorHandler::set(ErrorHandler* pHandler)
{
	ASSERT(pHandler != NULL);

	FastMutex::ScopedLock lock(_mutex);
	ErrorHandler* pOld = _pHandler;
	_pHandler = pHandler;
	return pOld;
}

	
ErrorHandler* ErrorHandler::defaultHandler()
{
	static SingletonHolder<ErrorHandler, FastMutex> sh;
	return sh.get();
}

////////////////////////////////////////////////////////////////////////////////

NS_NIT_END;
